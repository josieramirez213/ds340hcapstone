head(act)
head(cpus)
library(tidyverse)
#install.packages("lubridate")
#install.packages("hms")
#library(lubridate)
library(hms)
#library(ggplot2) #already loaded with tidyverse
#trying to use tidyverse rather than r [] syntax
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
head(newAct)
dim(newAct)
newAct<- newAct %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) ) %>%
mutate(year = 2023)
newAct
#loading in all the data sets
act23<-read.csv("atusact_2023.dat",header=TRUE)
act22<-read.csv("atusact_2022.dat",header=TRUE)
act21<-read.csv("atusact_2021.dat",header=TRUE)
act20<-read.csv("atusact_2020.dat",header=TRUE)
act19<-read.csv("atusact_2019.dat",header=TRUE)
act18<-read.csv("atusact_2018.dat",header=TRUE)
act17<-read.csv("atusact_2017.dat",header=TRUE)
act16<-read.csv("atusact_2016.dat",header=TRUE)
#making them into a list
myList = list()
myList[["df1"]] <- act23
myList[["df2"]] <- act22
myList[["df3"]] <- act21
myList[["df4"]] <- act20
myList[["df5"]] <- act19
myList[["df6"]] <- act18
myList[["df7"]] <- act17
myList[["df8"]] <- act16
#print(names(myList))
#lapply(myList, head)
#loop through every element in that list
y = 2023
dfList = list()
for (i in myList){
actY<- i %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) ) %>%
mutate(year = y)
newActY<- actY %>%
filter((TUTIER1CODE == 3 | TUTIER1CODE == 4) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
dfList[[paste0("year", y)]] <- newActY
#myList[[as.character(y)]] <- newActY
y<- y-1
}
print(names(dfList))
lapply(dfList, head)
#loading in all the data sets
act23<-read.csv("atusact_2023.dat",header=TRUE)
act22<-read.csv("atusact_2022.dat",header=TRUE)
act21<-read.csv("atusact_2021.dat",header=TRUE)
act20<-read.csv("atusact_2020.dat",header=TRUE)
act19<-read.csv("atusact_2019.dat",header=TRUE)
act18<-read.csv("atusact_2018.dat",header=TRUE)
act17<-read.csv("atusact_2017.dat",header=TRUE)
act16<-read.csv("atusact_2016.dat",header=TRUE)
#making them into a list
myList = list()
myList[["df1"]] <- act23
myList[["df2"]] <- act22
myList[["df3"]] <- act21
myList[["df4"]] <- act20
myList[["df5"]] <- act19
myList[["df6"]] <- act18
myList[["df7"]] <- act17
myList[["df8"]] <- act16
#print(names(myList))
#lapply(myList, head)
#loop through every element in that list
y = 2023
dfList = list()
for (i in myList){
actY<- i %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) ) %>%
mutate(year = y)
newActY<- actY %>%
filter((TUTIER1CODE == 3 | TUTIER1CODE == 4) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE, total_mins, year)
dfList[[paste0("year", y)]] <- newActY
#myList[[as.character(y)]] <- newActY
y<- y-1
}
print(names(dfList))
lapply(dfList, head)
full_df<- rbind(dfList[["year_2023"]], dfList[["year_2022"]],
dfList[["year_2021"]], dfList[["year_2020"]],
dfList[["year_2019"]], dfList[["year_2018"]],
dfList[["year_2017"]], dfList[["year_2016"]])
full_df
full_df
full_df<- rbind(dfList[["year2023"]], dfList[["year2022"]],
dfList[["year2021"]], dfList[["year2020"]],
dfList[["year2019"]], dfList[["year2018"]],
dfList[["year2017"]], dfList[["year2016"]])
full_df
head(full_df)
tail(full_df)
timeHH<- full_df %>%
group_by(TUTIER1CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeHH
timeHH_type<- full_df %>%
filter(TUTIER1CODE==3)%>%
group_by(TUTIER2CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeHH_type
time<- full_df %>%
group_by(TUTIER1CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
time
timeHH_type<- full_df %>%
filter(TUTIER1CODE==3)%>%
group_by(TUTIER2CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeHH_type
timeNH_type<- newAct %>%
filter(TUTIER1CODE==4)%>%
group_by(TUTIER2CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeNH_type
time
ggplot(full_df, aes(x = factor(TUTIER2CODE), y = total_mins) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) versus NonHousehold (4) Children", y = "Total Time Spent with Child",
title = "In the past 8 years,
total time spent caring for and helping
household and nonhousehold children"),
theme_minimal()
)
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) versus NonHousehold (4) Children", y = "Total Time Spent with Child",
title = "In the past 8 years,
total time spent caring for and helping
household and nonhousehold children"),
theme_minimal()
)
full_df
ggplot(data, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "TUTIER1CODE", y = "Total Minutes", title = "Violin Plot of Total Minutes by TUTIER1CODE") +
theme_minimal()
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "TUTIER1CODE", y = "Total Minutes", title = "Violin Plot of Total Minutes by TUTIER1CODE") +
theme_minimal()
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children"), theme_minimal()
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children")+ theme_minimal()
full_df
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
ylim(0, NA)
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, NA))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, NA))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 650))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = "In the past 8 years, total time spent caring for and helping household and nonhousehold children") + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = paste("In the past 8 years,", "\ntotal time spent caring for and helping household and nonhousehold children")) + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = paste("In the past 8 years,", "\ntotal time spent caring for and helping household and nonhousehold children", "\ncapped at 500")) + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Household (3) and NonHousehold (4) Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 500")) + theme_minimal() +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 500")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 500")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(fun = mean, geom = "point", shape = 21, size = 3, color = "blue", fill = "blue", stroke = 2, position = position_dodge(0.75)) +  # Mean
stat_summary(fun = median, geom = "point", shape = 22, size = 3, color = "yellow", fill = "yellow", stroke = 2, position = position_dodge(0.75))  # Median +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 500")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(fun = mean, geom = "point", shape = 21, size = 3, color = "blue", fill = "blue", stroke = 2, position = position_dodge(0.75)) +
stat_summary(fun = median, geom = "point", shape = 22, size = 3, color = "yellow", fill = "yellow", stroke = 2, position = position_dodge(0.75))  +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 500), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(fun = mean, geom = "point", shape = 21, size = 3, color = "blue", fill = "blue", stroke = 2, position = position_dodge(0.75)) +
stat_summary(fun = median, geom = "point", shape = 22, size = 3, color = "yellow", fill = "yellow", stroke = 2, position = position_dodge(0.75))  +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(fun = mean, geom = "point",size = 3, color = "blue") +
stat_summary(fun = median, geom = "point", size = 3, color = "yellow")  +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(fun = mean, geom = "point",size = 1, color = "blue") +
stat_summary(fun = median, geom = "point", size = 1, color = "yellow")  +
#ylim(0, NA)
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1, color = "blue") +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1, color = "yellow")  +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
guides(color = guide_legend(title = "Statistics"))  +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
guides(color = guide_legend(title = "Statistics"))  +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
#guides(color = guide_legend(title = "Statistics"))  +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children, capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
#guides(color = guide_legend(title = "Statistics"))  +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children, capped at 400")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
guides(color = guide_legend(title = NULL))  +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children, capped at 250")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
guides(color = guide_legend(title = NULL))  +
scale_y_continuous(limits = c(0, 250), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
getwd()
getwd()
getwd()
getwd()
getwd()
setwd("C:/Users/Ramirez/OneDrive/Desktop/ds340hcapstone/atusRQ")
getwd()
#
# minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = nonhh, FUN = sum)
# minsBy2Code
#
# ## Combing datasets so info is all in one
# act23 <- merge(hh, nonhh, by = "TUCASEID", all = FALSE)
# head(act23)
# tail(act23)
# #not really sure
# #-------------ask
source("C:/Users/Ramirez/OneDrive/Desktop/ds340hcapstone/atusRQ/RamirezJ.Project.ds340h.R", echo=TRUE)
#Josie Ramirez
#DS 340
#Homework 3
## Downloading Data
#Focusing on getting the needed variables for one year, 2023. Once I am able to do one year, I can do the same for the other seven years
getwd()
#setwd("C:/Users/Ramirez/OneDrive/Desktop/Cla$$/Fall '24/ds340h/atusRQ")
#C:\Users\Ramirez\OneDrive\Desktop\ds340hcapstone\atusRQ
setwd("C:/Users/Ramirez/OneDrive/Desktop/ds340hcapstone/atusRQ")
# act<-read.csv("atusact_2023.dat",header=TRUE)
# cpus<- read.csv("atuscps_2023.dat", header = TRUE)
#
# head(act)
# head(cpus)
## Working with Activity 2023
library(tidyverse) #trying to use tidyverse rather than r [] syntax
#install.packages("lubridate")
#install.packages("hms")
#library(lubridate)
library(hms)
#library(ggplot2) #already loaded with tidyverse
#loading in all the data sets---------------------------------
act23<-read.csv("atusact_2023.dat",header=TRUE)
act22<-read.csv("atusact_2022.dat",header=TRUE)
act21<-read.csv("atusact_2021.dat",header=TRUE)
act20<-read.csv("atusact_2020.dat",header=TRUE)
act19<-read.csv("atusact_2019.dat",header=TRUE)
act18<-read.csv("atusact_2018.dat",header=TRUE)
act17<-read.csv("atusact_2017.dat",header=TRUE)
act16<-read.csv("atusact_2016.dat",header=TRUE)
#making them into a list
myList = list()
myList[["df1"]] <- act23
myList[["df2"]] <- act22
myList[["df3"]] <- act21
myList[["df4"]] <- act20
myList[["df5"]] <- act19
myList[["df6"]] <- act18
myList[["df7"]] <- act17
myList[["df8"]] <- act16
#print(names(myList))
#lapply(myList, head)
#loop through every element in that list
y = 2023
dfList = list()
#---------------------------------
# Creating Function to merge calculate total time for all 8 years
#----------------------------------
for (i in myList){
actY<- i %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) ) %>%
mutate(year = y)
##Taking only the columns I want
newActY<- actY %>%
filter((TUTIER1CODE == 3 | TUTIER1CODE == 4) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE, total_mins, year)
dfList[[paste0("year", y)]] <- newActY
#myList[[as.character(y)]] <- newActY
y<- y-1
}
print(names(dfList))
lapply(dfList, head)
#---------------------------------
# Merging all the datasets, rbind
full_df<- rbind(dfList[["year2023"]], dfList[["year2022"]],
dfList[["year2021"]], dfList[["year2020"]],
dfList[["year2019"]], dfList[["year2018"]],
dfList[["year2017"]], dfList[["year2016"]])
head(full_df)
tail(full_df)
#---------------------------------
## Total Time for Household and NonHousehold Children
time<- full_df %>%
group_by(TUTIER1CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
time
#---------------------------------
## Household Children: Total Time Spent by Tier2Code
timeHH_type<- full_df %>%
filter(TUTIER1CODE==3)%>%
group_by(TUTIER2CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeHH_type
#---------------------------------
## NonHousehold Children: Total Time Spent by Tier2Code
timeNH_type<- full_df %>%
filter(TUTIER1CODE==4)%>%
group_by(TUTIER2CODE) %>%
summarise(mean_time = mean(total_mins), sum_mins = sum(total_mins), sum_hr = sum(total_mins)/60)
timeNH_type
#---------------------------------
## Visual showing difference between total time spent between household and nonhousehold children
full_df
ggplot(full_df, aes(x = factor(TUTIER1CODE), y = total_mins)) +
geom_violin(trim = FALSE) +
labs(x = "Children", y = "Total Time Spent with Child", title = paste("In the past 8 years, total time spent caring for and helping","\nhousehold and nonhousehold children, capped at 250")) + theme_minimal() +
scale_x_discrete(labels = c("Household Children", "Nonhousehold Children")) +  # Custom labels +
# Add mean and median
stat_summary(aes(color = "Mean"), fun = mean, geom = "point",size = 1) +
stat_summary(aes(color = "Median"), fun = median, geom = "point", size = 1) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "yellow")) +  # Custom colors for legend
guides(color = guide_legend(title = NULL))  +
scale_y_continuous(limits = c(0, 250), breaks = seq(0, 650, by = 50)) +
theme(plot.title = element_text(hjust = 0.5))
#maybe would want to zoom in more
#the x-axis could be better
#---------------------------------
#---------------------------------
#---------------------------------
#Left off here
#Trying to Merge Activity with Income
head(newAct)
full_df
head(full_df)
colnames(full_df)
head(cpus)
act<-read.csv("atusact_2023.dat",header=TRUE)
cpus<- read.csv("atuscps_2023.dat", header = TRUE)
#
head(act)
head(cpus)
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
# #TESEX not in activity would need to see another file
#
head(newAct)
head(cpus)
mergedDf<- newAct %>%
left_join(select(cpus, TUCASEID, HEFAMINC), by = "TUCASEID")
mergedDf
head(mergedDf)
tail(mergedDf)
r<- read.csv("atusresp_2023.dat", header = TRUE)
r<- read.csv("atusresp_2023.dat", header = TRUE)
newR<- r %>%
select(TRNUMHOU)
head(newR)
newR<- r %>%
select(TUCASEID, TRNUMHOU)
head(newR)
mergedDf<- newAct %>%
left_join(select(cpus, TUCASEID, HEFAMINC), by = "TUCASEID")
head(mergedDf)
tail(mergedDf)
new_mergedDf<- mergedDf %>%
left_join(select(newR, TUCASEID, TRNUMHOU), by = "TUCASEID")
head(new_mergedDf)
tail(new_mergedDf)
