setwd("C:/Users/Ramirez/OneDrive/Desktop/Cla$$/Fall '24/ds340h")
getwd()
#reading in the files:
act22<- read.csv("new_acti2022.csv") #new method
head(activity)
#reading in the files:
act22<- read.csv("new_acti2022.csv") #new method
dim(act22)
colnames(act22)
head(act22)
resp22<- read.csv("new_resp2022.csv") #new method
head(resp22)
colnames(resp22)
colnames(act22)
colnames(resp22)
resp22<- read.csv("new_resp2022.csv") #new method
head(resp22)
colnames(resp22)
#reading in the files:
act22<- read.csv("new_acti2022.csv") #new method
head(act22)
#reading in the files:
act22<- read.csv("new_act22.csv") #new method
setwd("C:/Users/Ramirez/OneDrive/Desktop/Cla$$/Fall '24/ds340h")
getwd()
#reading in the files:
act22<- read.csv("new_act22.csv") #new method
head(act22)
colnames(act22)
resp22<- read.csv("new_resp22.csv") #new method
colnames(resp22)
TELFS
colnames(act22)
sub_act22<- act22[,c(1, 23, 24,25)]
colnames(sub_act22)
head(sub_act22)
dim(sub_act22)
dim(sub_act22)
eatingAt1<- sub_act22[sub_act22$TUTIER1CODE==11 & sub_act22$TUSTARTTIM == "13:00:00"]
eatingAt1<- sub_act22[sub_act22$TUTIER1CODE==11 & sub_act22$TUSTARTTIM == "13:00:00", ]
#--- come back and change time to be interval, if time
head(eatingAt1)
dim(eatingAt1)
length(unique(eatingAt1$TUCASEID))
sub_resp22<- resp22[,c(1, 2, 24)]
colnames(sub_resp22)
head(sub_resp22)
dim(sub_act22)
colnames(sub_resp22)
hasJob<- sub_resp22[sub_resp22$TELFS==1 | sub_resp22$TELFS==2] #has jobs
hasJob<- sub_resp22[sub_resp22$TELFS==1 | sub_resp22$TELFS==2, ] #has jobs
head(hasJob)
dim(hasJob)
length(unique(hasJob$TUCASEID))
#not needed for now sub_act22$TUTIER1CODE==11 &
eatingAt1<- sub_act22[sub_act22$TUSTARTTIM == "13:00:00", ] #people at 1
#--- come back and change time to be interval, if time
head(eatingAt1)
dim(eatingAt1) #342
length(unique(eatingAt1$TUCASEID)) #also 342 so no duplicates, ready to merge
#not needed for now sub_act22$TUTIER1CODE==11 &
activityAt1<- sub_act22[sub_act22$TUSTARTTIM == "13:00:00", ] #people at 1
#--- come back and change time to be interval, if time
head(activityAt1)
dim(activityAt1) #1711
length(unique(activityAt1$TUCASEID)) #also 1711 so no duplicates, ready to merge
mergedDf<- merge(activity, hasJob, by = "TUCASEID")
mergedDf<- merge(activityAt1, hasJob, by = "TUCASEID")
dim(mergedDf)
eatingJob1<- mergedDf[mergedDf$TUTIER1CODE==11]
eatingJob1<- mergedDf[mergedDf$TUTIER1CODE==11, ]
dim(eatingJob1)
amountJobsProp<- prop.table(amountJobs)
counts<- c(834, 215)
categories<- c("Not Eating", "Eating")
prop<- counts/sum(counts)
prop
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
xlab = "",
)
prop<- counts/sum(counts)
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories
ylim = c(0, 1),
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
)
text(plot1, prop, labels = round(prop, 2), pos = 3, cex = 0.8, col = "black")
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
color = orange
)
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
color = orange,
)
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
color = "orange",
)
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
color = "orange",
)
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
col = "orange",
)
text(plot1, prop, labels = round(prop, 2), pos = 3, cex = 0.8, col = "black")
prop<- counts/sum(counts)
prop
215/1049
834/1049
prop
#reading in the files:
act22<- read.csv("new_act22.csv") #new method
head(act22)
colnames(act22)
dim(act22)
sub_act22<- act22[,c(1, 23, 24,25)]
colnames(sub_act22)
head(sub_act22)
dim(sub_act22)
#want: TUSTARTTIM23, TUSTOPTIME 24, TUTIER1CODE 25 , TUCASEID 1
#not needed for now sub_act22$TUTIER1CODE==11 &
activityAt1<- sub_act22[sub_act22$TUSTARTTIM == "13:00:00", ] #people at 1
#--- come back and change time to be int, then do interval, if time allows
#
head(activityAt1)
dim(activityAt1) #1711
length(unique(activityAt1$TUCASEID)) #also 1711 so no duplicates, ready to merge
resp22<- read.csv("new_resp22.csv") #new method
head(resp22)
colnames(resp22)
dim(resp22)
sub_resp22<- resp22[,c(1, 2, 24)]
colnames(sub_resp22)
head(sub_resp22)
dim(sub_act22)
#want: TUCASEID1, TULINENO2, TELFS 24
hasJob<- sub_resp22[sub_resp22$TELFS==1 | sub_resp22$TELFS==2, ] #has jobs
head(hasJob)
dim(hasJob) #4785, all those with jobs
length(unique(hasJob$TUCASEID)) #4785 no duplicates, ready to merge
#------------- merging data frames
#so has all people who are employed doing some activity, starting at 1 pm
mergedDf<- merge(activityAt1, hasJob, by = "TUCASEID")
dim(mergedDf) #1049 all people with jobs at 1 which should be be denom??
eatingJob1<- mergedDf[mergedDf$TUTIER1CODE==11, ]
dim(eatingJob1) #215 people with jobs are eating at one
#proportion of people eating with jobs: 215/1049
#proportion of people not eating with jobs: 834/1049
#215/1049
#834/1049
?barplot
counts<- c(834, 215)
categories<- c("Not Eating", "Eating")
prop<- counts/sum(counts)
prop
plot1<- barplot(prop,
main = "At 1 pm, are people with jobs eating?",
names.arg= categories,
ylim = c(0, 1),
col = "orange",
)
?round
?text
text(plot1, prop, labels = round(prop, 2), pos = 3, cex = 0.8, col = "black")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/Ramirez/OneDrive/Desktop/Cla$$/Fall '24/ds340h/atusRQ")
act<-read.csv("atusact_2023.dat",header=TRUE)
cpus<- read.csv("atuscps_2023.dat", header = TRUE)
head(act)
head(cpus)
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter(TUTIER1CODE = 03 & TUTIER1CODE = 04) %>%
library(tidyverse)
#trying to use tidyverse rather than r [] syntax
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter(TUTIER1CODE == 03 & TUTIER1CODE == 04) %>%
select(TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter(TUTIER1CODE == 03 & TUTIER1CODE == 04) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
#---ask: not sure if I should include this as an analysis
head(newAct)
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter(TUTIER1CODE == 03 | TUTIER1CODE == 04) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
#---ask: not sure if I should include this as an analysis
head(newAct)
class(newAct$TUTIER2CODE)
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
#---ask: not sure if I should include this as an analysis
head(newAct)
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
#---ask: not sure if I should include this as an analysis
head(newAct)
dim(newAct)
class(newAct$TUSTARTTIM)
print(class(newAct$TUTIER2CODE))
print(class(newAct$TUSTARTTIM))
hh <- newAct[newAct$TUTIER1CODE == 3, ]
dim(hh)
hh <- newAct[newAct$TUTIER1CODE == 3, ]
dim(hh)
#these indicate specifically household children care
hh<- hh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
library(tidyverse)
library(lubridate)
#trying to use tidyverse rather than r [] syntax
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#need to convert start and stop times
```
print(class(newAct$TUSTARTTIM))
```{r}
library(hms)
library(lubridate)
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#need to convert start and stop times
```
class(newAct$TUSTARTTIM)
#need to convert start and stop times
```
hh<- hh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(hh)
hh <- newAct[newAct$TUTIER1CODE == 3, ]
dim(hh)
#these indicate specifically household children care
hh<- hh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(hh)
minsBy2Code <- aggregate(Duration_Minutes ~ TUTIER2CODE, data = hh, FUN = sum)
minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = hh, FUN = sum)
minsBy2Code
minsBy2Code
nonhh <- newAct[newAct$TUTIER1CODE == 4, ]
dim(hh)
#these indicate specifically household children care
nonhh<- nonhh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(nonhh)
minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = hh, FUN = sum)
minsBy2Code
nonhh <- newAct[newAct$TUTIER1CODE == 4, ]
dim(hh)
#these indicate specifically household children care
nonhh<- nonhh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(nonhh)
minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = nonhh, FUN = sum)
minsBy2Code
head(combined_data)
act23 <- full_join(hh, nonhh, by = "TUCASEID")
head(act23)
tail(act23)
act23 <- full_join(hh, nonhh, by = "TUCASEID")
head(act23)
tail(act23)
library(tidyverse)
install.packages("hms")
library(lubridate)
#trying to use tidyverse rather than r [] syntax
library(tidyverse)
install.packages("lubridate")
library(lubridate)
#trying to use tidyverse rather than r [] syntax
install.packages("lubridate")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("lubridate")
install.packages("hms")
#library(lubridate)
library(hms)
#trying to use tidyverse rather than r [] syntax
install.packages("hms")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/Ramirez/OneDrive/Desktop/Cla$$/Fall '24/ds340h/atusRQ")
act<-read.csv("atusact_2023.dat",header=TRUE)
cpus<- read.csv("atuscps_2023.dat", header = TRUE)
head(act)
head(cpus)
library(tidyverse)
#install.packages("lubridate")
#install.packages("hms")
#library(lubridate)
library(hms)
#trying to use tidyverse rather than r [] syntax
#variables wanted: TUCASEID, TESEX, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE
newAct<- act %>%
filter((TUTIER1CODE == 03 | TUTIER1CODE == 04) &
(TUTIER2CODE == 1 | TUTIER2CODE == 2 | TUTIER2CODE == 3)
) %>%
select(TUCASEID, TUACTIVITY_N, TUSTARTTIM, TUSTOPTIME, TUTIER1CODE, TUTIER2CODE, TUTIER3CODE)
#TESEX not in activity would need to see another file
#---ask: not sure if I should include this as an analysis
head(newAct)
dim(newAct)
class(newAct$TUSTARTTIM)
#need to convert start and stop times
hh <- newAct[newAct$TUTIER1CODE == 3, ]
dim(hh)
#these indicate specifically household children care
hh<- hh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(hh)
minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = hh, FUN = sum)
minsBy2Code
nonhh <- newAct[newAct$TUTIER1CODE == 4, ]
dim(hh)
#these indicate specifically household children care
nonhh<- nonhh %>%
mutate(total_mins = as.numeric(difftime(as_hms(TUSTOPTIME), as_hms(TUSTARTTIM), units = "mins")) )
head(nonhh)
minsBy2Code <- aggregate(total_mins ~ TUTIER2CODE, data = nonhh, FUN = sum)
minsBy2Code
act23 <- full_join(hh, nonhh, by = "TUCASEID")
head(act23)
tail(act23)
#not really sure
#-------------ask
